[{"title":"GPU硬件架构解析","url":"/2025/08/10/GPU硬件架构解析/","content":"\n## 1. 引言\n\n- AI计算需求与硬件挑战\n\n  当我尝试训练一个大模型时，通常会遇到两个挑战：\n\n  1. 这个模型能否在现有硬件环境中运行？\n\n  2. 需要多长时间才能完成一个数据集的训练？\n\n     这个两个挑战的核心也正式是大模型的扩展定律（Scaling Law）中提到的队模型表现的两个因素：模型规模和数据规模。\n\n  Scaling Law\n\n  ​\t在 AI 模型的发展过程中，Scaling Law（扩展定律）成为推动性能提升的重要理论基础。根据 Scaling Law，当模型参数、训练数据和硬件配置同步增加时，AI 模型的能力会随之提升。\n\n  \n\n​       硬件挑战\n\n​        a. 摩尔定律增速放缓、晶体管尺寸物理极限、能耗不断增加。\n\n​\tb. 存储墙：存储器的数据访问速度跟不上计算处理速度。\n\n​\tc. 能耗墙：随着芯片性能的提升，能耗和散热问题成为限制进一步性能提升的主要因素。\n\n- GPU在AI计算中的核心地位\n\n  \n\n- 本文架构解析思路\n\n  主要从以下三个维度进行解析：\n\n  - 系统维度\n     硬件组件层 → 子系统层 → 系统层 → 集群层\n      ↓                           ↓                   ↓               ↓\n     GPU核心          GPU模组   AI服务器   AI集群\n\n  - 性能维度\n\n     计算瓶颈 → 内存瓶颈 → 存储瓶颈 → 网络瓶颈\n         ↓                      ↓                    ↓                   ↓\n     GPU算力    内存带宽           存储IO    网络延迟\n         ↓                      ↓                    ↓                   ↓\n     FLOPS         带宽/延迟          IOPS     吞吐量/延迟\n\n  - 扩展维度\n\n     单GPU → 多GPU → 单节点 → 多节点 → 大规模集群\n       ↓                   ↓               ↓                 ↓                 ↓\n     计算密度  互联带宽  节点密度   网络带宽    系统规模\n\n\n## 2. GPU核心架构\n\n### 2.1 单GPU内部结构\n\n- 计算单元 (CUDA核心、张量核心)\n\n- 内存层次 (寄存器、共享内存、L2缓存、显存)\n\n- 互联结构 (PCIe、NVLink)\n\n### 2.2  多GPU扩展方式\n\n单卡GPU形态\n| 形态  | 规格                                                         | 版本演进 | 备注                        |\n|----- |--------------------------------|:------------------------- |-------------------------- |\n| PCIe卡 | <img src=\"./Snipaste_2025-08-04_15-33-27.png\" style=\"zoom:40%;\" > | 全高全长FHFL |                             |\n| SXM卡  | <img src=\"https://l4rz.net/running-nvidia-sxm-gpus-in-consumer-pcs/images/sxm4-vicor-preso.jpg\" style=\"zoom:25%;\" /> | SXM 1.0 Pascal <br>SXM 2.0 & 3.0 Volta <br>SXM 4.0 Ampere <br>SXM 5.0 Hopper | *Server PCI Express Module* |\n| OAM卡  | <img src=\"/Users/rockyliu/Documents/Snipaste_2025-08-04_16-09-27.png\" style=\"zoom:45%;\" /> | OAM 1.0  2019.07.13<br>OAM 1.1 2020.07.22<br>OAM 1.5 2022.02.23<br>OAM 2.0 2023.09.14 | *OCP Accelerator Module* |\n\n- 单卡到多卡的技术路径\n\n  常见三种GPU形态，但是在实际使用中很少出现单卡场景，通常搭配两卡、四卡及八卡使用；\n\n  - 多卡物理形态\n\n    | 形态      | 拓扑结构                                                     | 规格                                                         | 描述                                                         |\n    | --------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n    | PCIe 多卡 |                                                              | <img src=\"/Users/rockyliu/Documents/PCIe*8.png\" style=\"zoom:35%;\" /> |                                                              |\n    | HGX       | <img src=\"/Users/rockyliu/Documents/HGX.png\" style=\"zoom:50%;\" /> | [HGX-Platform](https://www.nvidia.com/en-us/data-center/hgx/) 8卡<img src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2020/05/HGX_A100_8_way_3QTR_Front_Left-Edit-1-625x417.jpg\" style=\"zoom:45%;\" />/> | 该基板搭载：<br>i.8 /4 个 NVIDIA GPU <br>ii.6 个 NVSwitch 节点。<br>(*Ps:*NVSwitch数量不固定) |\n    | UBB       | <img src=\"/Users/rockyliu/Documents/UBB8.png\" alt=\"image-20250804172853058\" style=\"zoom:20%;\" /> | <img src=\"https://www.servethehome.com/wp-content/uploads/2025/06/AMD-Instinct-MI350X-UBB-8-GPU.jpg\" style=\"zoom:25%;\" /> | *Universal Baseboard*                                        |\n\n    https://developer-blogs.nvidia.com/wp-content/uploads/2020/05/HGX_A100_8_way_3QTR_Front_Left-Edit-1-625x417.jpg\n\n    GPU集群拓扑结构\n\n- 带宽与延迟挑战\n\n## 3. AI服务器系统架构\n\n### 3.1 硬件组件组成\n\n- CPU与系统内存\n\n- GPU模组与显存\n\n- 存储系统 (NVMe SSD)\n\n- 网络接口 (InfiniBand/RoCE)\n\n### 3.2 互联技术对比\n\n- PCIe vs NVLink vs InfiniBand\n\n- GPU Direct RDMA技术\n\n- 数据传输优化策略\n\n## 4. 服务器形态与部署\n\n### 4.1 服务器类型\n\n- 紧耦合型 (DGX系列)\n\n- 模块化型 (OAM/OCP标准)\n\n- 定制化解决方案\n\n### 4.2 散热与电源\n\n- 风冷 vs 液冷方案\n\n- 高密度GPU的散热挑战\n\n- 电源管理与能效优化\n\n## 5. 性能优化策略\n\n### 5.1 内存优化\n\n- HBM vs GDDR显存选择\n\n- 显存容量与带宽平衡\n\n- 大模型训练的内存策略\n\n### 5.2 存储优化\n\n- GPU Direct Storage技术\n\n- NVMe存储直通\n\n- 数据加载性能优化\n\n## 6. 发展趋势与展望\n\n### 6.1 技术演进方向\n\n- 计算密度持续提升\n\n- 互联带宽不断增长\n\n- 异构计算加速器整合\n\n### 6.2 新兴技术影响\n\n- 存储-计算融合架构\n\n- 近数据计算技术\n\n- 未来AI硬件发展方向\n\n## 7. 总结\n\n- AI服务器架构设计要点\n\n- 性能瓶颈与优化方向\n\n- 技术选型建议\n"},{"title":"CPU硬件架构解析","url":"/2025/08/10/CPU硬件架构解析/","content":"\n## 1.引言\n\n《Processor Microarchitecture An Implementation Perspective》\n\n链接：https://dl.icdst.org/pdfs/files/15b09def448c317556dc0fc412aee571.pdf\n\n处理器微架构演进主要源自两个因素：\n\n- technology scaling\n\n- workload evolution\n\n###1.1 Moore’s Law\n\n- Moore, Gordon E. (1965). \"Cramming more components onto integrated circuits\" (PDF). Electronics Magazine. pp. 4.\n  - “The complexity for minimum component costs has increased at a rate of roughly a factor of two per year.”\n  - Moore refined it to “every two years” in 1975\n  -  Also quoted as “every 18 months” by David House, (referring to performance)\n  - Most popular formulation: #transistors/IC\n- Carver Mead coined it as Moore's law around 1970\n  - – “Tall & Thin engineers”\n- Ultimate limit of Moore’s Law\n  -  No one knows\n  - How to use the capability? Resource limit?\n### 1.2 CPU微体系结构\n#### 1.2.1 微架构分类\n\n按照一些相互正交的维度进行分类：\n\n1. Pipelined/Nonpipelined Processors\n\n   Pipelined提高了ILP，并且由于成本效益好，几乎所有的处理器都采用\n\n2. In-Order/Out-of-Order Processors\n\n   Out-of-Order 需要更复杂的硬件设计，在乱序执行中，指令可以不按程序指定的顺序执行，减少阻塞，但对外表现的行为还是和顺序执行的处理器一样；\n\n3. Scalar/Superscalar Processors \n\n   标量和超标量处理器，标量处理器的 IPC 最多为 1，因为只有一套执行单元，而不是标量处理器的就是超标量处理器，IPC 可以大于 1。\n\n4. Vector Processors\n\n   向量处理器可以使用一条向量指令处理多个元素的向量，也就是 SIMD，例如 Intel 的 AVX 指令就是 SIMD 指令；\n\n5. Multicore Processors\n\n   是否多核？多核处理器中每一个核心的硬件资源相对独立不共享\n\n6. Multithreaded Processors\n\n   是否多线程？多线程中的线程通常共用大部分的硬件资源\n\n**流水线技术**\n\n![image-20250724163845529](/Users/rockyliu/Library/Application Support/typora-user-images/image-20250724163845529.png)\n\n一条指令的生命周期分为五个阶段：\n\n取指（IF）——>译码（ID）——>重命名 & 分发——>执行（EXE）——>访存（MEM）——>写回（WB）\n\n《从入门到放弃：CPU流水线技术全解析》https://juejin.cn/post/7401417746541068297\n\n将访存单独作为一个阶段的考虑：\n\n- 假设访存延迟为0周期，即理想寄存器\n\n- 地址计算（加法器）的路径和访存路径加起来太长\n\n  - 拆分为两个阶段更均衡\n\n  但在实际的处理器设计中, 上述假设不再成立\n\n  访存操作一般需要多个周期；\n\n  cache: 缓存的控制逻辑是个状态机；即使命中，状态机也需要经过若干个周期的控制才能读出数据\n\n  访存路径上有很多地址寄存器，地址计算的延迟和资源开销并不明显\n\n#### \n\n\n\n\n\n\n\n\nhttps://xiaofeng.info//presentations/history_Intel_CPU.pdf\n\nhttps://www.agner.org/optimize/microarchitecture.pdf\n\nhttps://www.mindshare.com/eLearning/Course/Intel_x86_Processor_and_Platform_Architecture_eLearning_Course\n\n\n\n\n\n\n\n• Intel x86 CPU and Chipset Evolution\n• Current Core and Xeon CPUs: Ice Lake, Cascade Lake, plus “Refresh” Variants\n• X86 Instruction Set Architecture (ISA) and CPU Operating Modes\n• Core and Xeon CPU Microarchitecture Differences\n• Caches\n• Platform Addressing\n• Main Memory DRAM\n• Ultra Path Interconnect (UPI)\n• CPU Integrated Graphics\n• CPU Integrated IO (IIO)\n• Interrupt Handling\n• Hardware Virtualization Support\n• Platform Controller Hub (PCH) Features\n• Power and Thermal Management\n• CPU Performance Monitoring\n\nhttps://cdrdv2-public.intel.com/786255/786255_330119_ia-introduction-basics-paper.pdf\n\nhttps://www.mindshare.com/files/ebooks/x86%20instruction%20set%20architecture.pdf\n\n\n\n\n\n## 2.X86\n\n### 2.1 Intel\n\n#### 2.1.1 产品路标演进\n\nIntel x86 Core and Xeon Platform Background\no Intel 64 and IA-32 CPU lineage\n§ 80386 to Ice Lake/Cascade Lake\n§ Core and Xeon CPUs Expected Next\no Ice Lake/Cascade Lake Platform Examples\n§ Gaming Desktop\n§ 2-in-1 Laptop\n§ Xeon Scalable CPU Server\n\nX86 Instruction Set Architecture (ISA)\no CPU Core Fetch/Decode/Execute Role\no X86 Instruction Basics\no Instruction Set Overview\n§ General Purpose Instructions\n§ Floating Point and SIMD Instructions\n§ Program Flow Instructions\n§ Hardware-Related Instructions\no X86 Register Set Overview\n§ General Purpose Registers (GPRs)\n§ X87/MMX Registers\n§ XMM/YMM/ZMM Registers\n§ Segmentation Registers\n§ Control Registers\n§ Debug Registers\n§ Model-Specific Registers (MSRs)\no X86 CPU Operating Modes\n§ Real Mode\n§ Protected Mode\n§ Virtual-8086 Mode\n§ System-Management Mode (SMM)\n§ IA32e (Long) Mode\n\n![image-20250724114810496](/Users/rockyliu/Library/Application Support/typora-user-images/image-20250724114810496.png)\n\n典型的Dual-socket systems\n\n![Intel® Xeon® Processor Scalable Family Block Diagram: 2S Configuration](https://intelcorp.scene7.com/is/image/intelcorp/purley-2s-configuration-block-diagram-16x9:1920-1080?wid=978&hei=550&fmt=webp-alpha)\n\n\n\n#### 2.1.2 NUMA 架构\n\n**Uniform Memory Access Domain**\n\n![img](https://www.intel.com/content/dam/developer/articles/technical/fourth-generation-xeon-scalable-family-overview/spr-uma.png)\n\n **Sub-NUMA Clustering**\n\n![img](https://www.intel.com/content/dam/developer/articles/technical/fourth-generation-xeon-scalable-family-overview/spr-2-snc.png)\n\n​                       Figure 2 – Block Diagram Representing Domains Of sub-NUMA With Two Clusters\n\n![img](https://www.intel.com/content/dam/developer/articles/technical/fourth-generation-xeon-scalable-family-overview/spr-4-snc.png)\n\n​                         Figure 3 – Block Diagram Representing Domains Of sub-NUMA With Four Clusters\n\n### 2.2 AMD\n\n#### 2.2.1 架构演进\n![AMD CPU架构](/Users/rockyliu/Documents/技术宝典/CPU/X86/AMD CPU架构.png)\n\nAMD EPYC 9004系列\n\n![image-20250723150813290](/Users/rockyliu/Library/Application Support/typora-user-images/image-20250723150813290.png)\n\n![AMD-9654](/Users/rockyliu/Documents/技术宝典/CPU/X86/AMD-9654.png)\n\n\n 5TH GEN AMD EPYC™ PROCESSOR ARCHITECTURE\n\nhttps://www.amd.com/content/dam/amd/en/documents/epyc-business-docs/white-papers/5th-gen-amd-epyc-processor-architecture-white-paper.pdf\n I/O DIE FEATURES\n\n![AMD-I:O die](/Users/rockyliu/Documents/技术宝典/CPU/X86/AMD-I:O die.png)\n\nWhen three links between processors are used, an additional 16 PCIe lanes on each CPU are available for general I/O, bringing the total I/O capacity up to 160 lanes. When four links are configured, they can support a maximum theoretical bandwidth of 512 GB/s between processors.\n\n1. 当双路CPU使用G-links * 3 （48 Lanes）时，另外的16 PCIe lanes 可以用于标准I/O，总的I/O能力扩展到160 lanes;\n2. 当双路CPU使用G-links * 4 （64 Lanes）时，CPU间支持最大双向理论带宽512GB/s。\n\n![Genoa](/Users/rockyliu/Documents/技术宝典/CPU/X86/Genoa.png)\n\nNon-Uniform Memory Access (NUMA) architecture \n\n- Different latencies \n\n​       depending on the proximity of a processor core to memory and I/O controllers\n\n- Same NUMA node provides uniform good performance,while use resources in differing nodes increases latencies. \n\nNUMA Setting \n\nNUMA Nodes Per Socket (NPSx)\n• NPS4: Four NUMA nodes per socket, one per quadrant.\n  o Requires symmetrical CCD configuration across all quadrants of the SoC.\n  o Preferred Interleaving: 2-channel interleaving using channels from each quadrant.\n• NPS2: Two NUMA nodes per socket, one per left/right half of the SoC.\n  o Requires symmetrical CCD configuration across left/right halves of the SoC.\n  o Preferred Interleaving: 4-channel interleaving using channels from each half.\n• NPS1: One NUMA node per socket.\n  o Available for any CCD configuration in the SoC.\n  o Preferred Interleaving: 8-channel interleaving using all channels in the socket.\n• NPS0: One NUMA node per system.\n  o Available only on a 2P system.\n  o Preferred Interleaving: 16-channel interleaving using all channels in the system.\nNote: If the CCD configuration is altered by software (e.g., BIOS Setup Option), NPS4 and NSP2\noptions may not be available based on the Symmetry requirements noted above.\n\n\n![NPS1](/Users/rockyliu/Documents/技术宝典/CPU/X86/NPS1.png)\n\n\n\n![image-20250723175300806](/Users/rockyliu/Library/Application Support/typora-user-images/image-20250723175300806.png)\n\n![image-20250723175400320](/Users/rockyliu/Library/Application Support/typora-user-images/image-20250723175400320.png)\n\n![image-20250723175602458](/Users/rockyliu/Library/Application Support/typora-user-images/image-20250723175602458.png)\n\n\n![image-20250723175515519](/Users/rockyliu/Library/Application Support/typora-user-images/image-20250723175515519.png)\n\n引发问题？\n\n   1.NUMA是个好东西，为啥有的业务场景抗拒开启NPS？\n\n- 跨NUMA分配CPU导致远程访问性能损耗，出现性能分层\n- 不同业务间共享核导致Cache频繁加载、互相污染开销增加，可用性和延时增加\n- 不同优先级和不同资源敏感程度 业务pod在节点上数量分配不均衡，导致竞争开销\n- 节点上其他资源的竞争（IO、网络、内存）\n\n   2.开启NPS后会增加Latency,会造成哪些影响？如何进行性能调优？\n\nInfinity Fabric links\n\n External Global Memory Interconnect [xGMI] links \n\n- Dual-socket systems\n\n​       4 xGMI ：4x16=64 PCIe lanes from each socket for Infinity Fabric connections.  leave 64 PCIe lanes each socket= 64x2=128 lanes \n\n​       3 xGMI :  In these cases, 160 lanes for PCIe (80 per socket) \n\n\n\n### 2.3 Chiplet技术\n\n​\t[Chiplet](https://zhuanlan.zhihu.com/p/604721264) 即小芯粒，它将一类满足特定功能的 die（裸片），通过 die-to-die 内部互联技术将多个模块芯片与底层基础芯片封装在一起，形成一个系统芯片。\n\n<img src=\"/Users/rockyliu/Documents/image-20250805145129441.png\" alt=\"image-20250805145129441\" style=\"zoom:80%;\" />\n\n- 大面积芯片降低成本提升良率\n\n  随着先进制程推进，研发成本持续走高。Chiplet 将单颗 SOC 的不同功能模块拆分成独立的小芯粒（即 Chiplet）， 大大缩小了单颗 die 的面积，起到提升良率、降低成本的作用。\n\n- 小芯片模块化，实现IP复用，加速芯片迭代\n\n- Die to die的高速互联（载板或者Interposer互联）“堆料“\n\n  Interposer 的材质又分为硅基、有机两种。若芯片是平铺在 封装的衬底上，则称为 2.5D 封装，若是芯片之间堆叠封装，则称为 3D 封装。\n\n  ![image-20250805145518266](/Users/rockyliu/Library/Application Support/typora-user-images/2.5D:3D封装.png)\n\n  芯片厂可以将多颗计算核心die进行合封，提高芯片整体性能。\n\n\n ## 3.ARM\n\n### 3.1 硬件架构\n《Kunpeng 920: The First 7-nm Chiplet-Based 64-Core ARM SoC for Cloud Services》\n\n链接：https://ieeexplore.ieee.org/document/9444893\n\n知乎解读：https://zhuanlan.zhihu.com/p/654058158\n\nKunpeng 920 采用乐高式架构设计。\n\n![image-20250725160244189](/Users/rockyliu/Library/Application Support/typora-user-images/image-20250725160244189.png)\n\n双路使用huawei的Hydra，接口提供24-lane的SerDes\n\n![image-20250725160326915](/Users/rockyliu/Library/Application Support/typora-user-images/image-20250725160326915.png)\n\n#### 3.1.1 芯片组件\n\n![image-20250724201151569](/Users/rockyliu/Library/Application Support/typora-user-images/image-20250724201151569.png)\n\n#### 3.1.2 组件单元\n\n- 片上总线：Cache一致性总线 Hydra接口级联\n\n- CCL：内核集群\n\n  华为鲲鹏920的每个内核集群（CCL）都由4个内核和专用L2 Cache组成。华为鲲鹏920的CCL之间支持完全一致性。总线上的其他功能单元可以一致性地访问每个CCL的缓存中的最新数据。\n\n![image-20250725151018554](/Users/rockyliu/Library/Application Support/typora-user-images/image-20250725151018554.png)\n\n- ICL：I/O集群\n\n![image-20250725151216449](/Users/rockyliu/Library/Application Support/typora-user-images/image-20250725151216449.png)\n\n一个典型的ICL包括以下组成部分：\n 1. 多个设备（如图2-9所示）；\n 2. 0个或1个SMMU（System Memory Management System），为设备提供地址转换和访问保护功能；\n 3. 1个系统总线接口\n 4. 1个Sysctrl或Subctrl，用于固件初始化和公共配置；\n 5. 1个Dispatch，为访问设备寄存器空间提供物理地址（PA）译码；\n 6. 0个或多个Scheduler，当设备数量较多时，Scheduler可以合并各设备的内存访问流量。\n\n- SCCL：超级内核集群\n\n  华为鲲鹏920的每个SCCL包括6个CCL、2个ICL和4个DDR控制器。DDR控制器也可以看做一个设备。SCCL内部结构如图2-10所示。\n\n  ![image-20250725152900850](/Users/rockyliu/Library/Application Support/typora-user-images/image-20250725152900850.png)\n\n- SICL：供超级I/O集群\n\n  每个SICL由4个ICL、1个Hydra接口和1个独立的IMU组成。\n\n  ![image-20250725152955168](/Users/rockyliu/Library/Application Support/typora-user-images/image-20250725152955168.png)\n\n3.2 内存子系统\n\n![image-20250725153128420](/Users/rockyliu/Library/Application Support/typora-user-images/image-20250725153128420.png)\n\n## 4.性能分析\n\n### 4.1 前置知识\n\n1. 熟悉CPU硬件，关注微架构级别的硬件演进和主流CPU演进：\n\n   a. X86 (Intel & AMD)、ARM（Kunpeng）等主流CPU厂商产品：\n\n   i. 基本参数\n\n    ii. 微架构设计 \n\n   iii. 各级（core、uncle、offcore）PMC含义、获取和应用方式（关键指标计算）\n\n   b. CPU体系结构\n\n   i. CPU流水线技术\n\n   ii. 理解CPU的页表机制、预取机制；\n\n   iii. 流水线+超标量+多发射技术如何并行执行指令提高效率\n\n   iv. 理解分支预测、\n\n   v. 内存组件的技术细节\n\n   vi. PCIe组件技术细节\n\n2. 了解Linux内核个和相应分析工具\n\n   a.熟悉Linux 进程和线程管理和调度\n\n   b. 掌握Linux的性能分析与调优方法，能够进行函数级问题定位；\n\n   i. 熟练使用 FlameGraph、perf、Prometheus等工具；\n\n   ii. Pstack.      Gdb  attach \n\n   iii. Ebpf工具、bpftrace 进行内核路径trace\n\n3. 了解公司业务的性能画像,能够通过Specint等Benchmark评估硬件性能：\n\n   a. 熟悉各类服务器性能指标的含义和获取方式,并据此评估业务性能需求；\n\n   i. 硬件上:CPU利用率、IPC、各级cache/TLBmiss率、branch和branchmiss数、内存占用、内存带宽、内存延迟、UPI/xGMI带宽、TMA指标、网卡带宽;\n\n   ii. 软件上:CPUuser/sys/软/硬中断利用率占比、整机load、网卡丢包、上下文切换次数;\n\n   b.理解各项基本单元测试的目的、方法,能够正确评估测试结果反映的性能水平：\n\n     i. 不同读写比例下的随机读写内存带宽-时延曲线;\n\n     ii. 原子操作的指令开销;\n\n     iii .Specint的各子项负载的工作pattern和性能需求;\n\n   c.掌握常见性能优化方式,帮助提高业务性能:\n\n     i. 正确使用大页内存、透明大页;\n\n     ii. 合理绑核,合理配置实例线程数量/内存大小;\n\n     iii. 正确配置网络相关参数(网卡队列数量、大小、中断绑核、网卡PCle配置);\n\n### 4.2 分析思路\n\n[木桶效应](https://zh.wikipedia.org/wiki/%E6%9C%A8%E6%A1%B6%E7%90%86%E8%AB%96)\n\n首先要识别性能瓶颈，通过监控测量分析定位性能瓶颈，才能结合场景对症下药（理解工作原理）\n\n在分析过程中要明确关注哪些性能指标，这个是性能分析的关键：\n\n-  微架构分析Microarchitecture analysis ：CPU内部瓶颈（bottlenecks）\n\n- 锁分析Lock analysis：锁竞争和等待时间\n\n- IO分析：IO操作瓶颈\n\n- 调度分析：由于调度产生的瓶颈\n\n- CPU限制分析：识别由于CPU竞争导致的瓶颈\n\n- 内存边界分析：内存碎片、内存总线限制\n\n  \n\n微架构分析：\n\n​\t现代CPU通常采用五级流水，通常包含五个执行阶段。每条指令可以分解为与流水线阶段对应的微操作：IF、ID、EXEC、MEM 和 WB。\n\n![img](https://miro.medium.com/v2/resize:fit:700/1*R2swNw346XPUM3fwbnAKBw.png)\n\n可以使用`perf stat`命令来检查：\n\n![](https://miro.medium.com/v2/resize:fit:640/format:webp/1*KMwBdGSYyB6F64mof-O7Lw.png)\n\n每个指令周期的指令数越多，应用程序可以完成的工作就越多。\n\n​\t\n\n**CPU数据缓存分析**\n\nCPU数据缓存分析可以通过`perf stat -e L1-dcache-load-misses,L1-dcache-loads`来验证。\n\n\n\n\n\n**CPU分支预测分析**\n\nCPU [分支预测](https://blog.cloudflare.com/branch-predictor/)的指标可以通过 来检查`perf stat -e branches,branch-misses`\n\n\n\nTLB 缓存和 FLOPS 是潜在的瓶颈。CPU 通常将虚拟地址到物理地址的转换缓存在 TLB 中。当 TLB 缓存未命中时，CPU 需要遍历内核页表，根据引用的虚拟地址计算物理地址。这个过程非常耗时。使用大页可以减轻 TLB 的压力。\n\nFlame graphs 火焰图 \n\n\n\n\n\n\n\n\n\n\n\nIPC和CPU频率的关系\n\n由于 IPC是衡量微架构性能优劣的指标\n\n内存密集型应用程序通常以低 IPC (0-1) 为特征，而计算密集型工作负载往往具有高 IPC (4-6)。\n\nLinux perf 用户可以通过运行以下命令测量其工作负载的 IPC：\n\n```shell\n$ perf stat -e cycles,instructions -- a.exe\n2369632 cycles\n1725916 instructions # 0,73 insn per cycle\n# 或更简单地:\n$ perf stat ./a.exe\n```\n\n\n\n\n\n\n\n问题：\n\n1.CPU核心时钟和参考时钟的区别？\n\n2.当你提高频率时， IPC（每个周期内的指令数）是上升、下降还是保持不变？\n\n3.Roofline 性能模型是一个以吞吐量为导向的性能模型\n\n硬件有两个主要限制：计算速度 (峰值计算性能， FLOPS) 和数据移动速度 (峰值内存带宽， GB/s)。\n\n算术强度 (Arithmetic Intensity, AI) 是 FLOPS 和字节之间的比率\n\n<img src=\"/Users/rockyliu/Documents/Roofline.png\" alt=\"image-20250805172347808\" style=\"zoom:67%;\" />\n\n图 中的 roofline 图将两个应用程序 A 和 B 的性能与硬件限制进行了对比。应用程序 A 的运算强度较低，其性能受内存带宽限制，应用程序 B 的计算密集型程度更高，因此不会受到内存瓶颈的太大影响。\n\n\n\n\n## 5.参考文献\n\n1.[CPU Performance Analysis](https://jackiedinh8.medium.com/cpu-performance-analysis-1e8f90ad2d94)\n\n2.[《Performance Analysis and Tuning on Modern CPU》](https://miro.medium.com/v2/resize:fit:640/format:webp/1*KMwBdGSYyB6F64mof-O7Lw.png)\n\n"},{"title":"宕机故障诊断","url":"/2025/08/10/宕机故障诊断/","content":"\n"},{"title":"服务器测试一本通","url":"/2025/05/22/服务器测试一本通/","content":"# 服务器测试一本通\n\n\n## 1. 前言\n\n### 1.1 编写目的\n\n​\t本文件旨在为服务器整机系统测试提供系统化、标准化的测试指导和操作规范。通过明确各部件及整机维度的测试内容、方法和要求，确保服务器产品在出厂前能够全面、有效地验证其功能、性能、稳定性、兼容性和安全性，提升产品质量，降低售后风险，为研发、测试及运维等相关人员提供权威的参考依据。\n\n### 1.2 适用范围\n\n​\t本文件适用于所有型号服务器产品的整机系统测试，包括但不限于X86、ARM等不同架构的服务器。适用对象涵盖服务器研发、测试、生产、质量管理等相关部门，适用于新产品开发、批量生产、版本升级及定制化项目的系统级测试工作。\n\n### 1.3 参考标准与文档\n\n- 《GB/T 20273-2006 信息技术 服务器通用规范》\n- 《GB/T 28181-2016 信息安全技术 网络和终端设备通用要求》\n- 《ISO/IEC 9126 软件工程 产品质量》\n- 《SPEC CPU Benchmark Documentation》\n- 《JEDEC DDR5 SDRAM 标准》\n- 公司内部《服务器硬件测试规范》\n- 公司内部《服务器生产测试流程》\n- 相关操作系统及硬件厂商官方文档（如 Intel、AMD、ARM、RedHat、openEuler 等）\n\n## 2. 测试环境准备\n\n### 2.1 硬件环境\n\n### 2.2 软件环境\n\n### 2.3 测试工具与脚本\n\n### 2.4 测试前置条件\n\n## 3.部件维度测试\n\n### 3.1 CPU处理器\n\n#### 3.1.1 识别与信息检测\n\n- 测试目的：验证操作系统和硬件管理工具能否正确识别CPU的型号、核心数、线程数、频率、缓存等关键信息。\n- 测试方法：\n\n1. 在操作系统下使用命令查看CPU信息。\n2. 通过BMC/IPMI Web界面或命令行工具查看CPU信息。\n3. 在BIOS/UEFI中查看CPU信息。\n\n- 测试工具：lscpu、cat /proc/cpuinfo、dmidecode、ipmitool。\n- 预期结果：各工具显示的信息与CPU硬件规格一致，无识别错误或信息缺失。\n\n#### 3.1.2 多核/多线程功能\n\n- 测试目的：验证所有CPU核心和线程均能被操作系统正常调度和使用。\n- 测试方法：\n\n1. 运行多线程压力测试，观察所有核心是否都被激活。\n2. 使用任务管理器或性能监控工具查看各核心的使用率。\n3. 将进程绑定到特定核心上运行，验证其功能。\n\n- 测试工具：stress-ng、taskset、htop。\n- 预期结果：所有核心和线程均能被正常调度，负载能够均匀或按需分配到各个核心。\n\n#### 3.1.3 性能测试\n\n- 测试目的：评估CPU的计算性能，包括整数/浮点运算、加密/解密、压缩/解压缩等能力，并与基准值或同类产品进行对比。\n\n- 测试方法：\n\n  1. 运行标准的CPU基准测试程序。\n  2. 模拟真实应用场景进行性能评估。\n\n- 测试工具：SPEC CPU® 2017 benchmark\n  Spec2017介绍：官网：https://www.spec.org/cpu2017/\n  SPECCPU是一套行业标准的CPU密集型基准测试套件，其性能分数和处理器计算能力、内存能力和编译器强相关。\n  Spec2017 是 Spec2006的演进版本，Spec2006当前已停止维护。Spec2017上的测试子项做了很多变动，其中rate和speed不再复用同一个二进制文件，并且speed中支持了多线程，不仅只使用单核。\n  1.Benchmark子项\n  按照计算类别分为int整型计算和fp浮点计算，int包含包括rate多任务计算性能和speed单任务计算性能，其中intrate/intspeed包括10个测试子项，fprate包括17个测试子项，fpspeed包含10个测试子项。\n\n  - int 整形\n\n  | intrate子项                                                  | intspeed子项                                                 | 语言    | 子项描述                                                     | 备注                                    |\n  | ------------------------------------------------------------ | ------------------------------------------------------------ | ------- | ------------------------------------------------------------ | --------------------------------------- |\n  | [500.perlbench_r](https://www.spec.org/cpu2017/Docs/benchmarks/500.perlbench_r.html) | [600.perlbench_s](https://www.spec.org/cpu2017/Docs/benchmarks/600.perlbench_s.html) | C       | Perl interpreter                                             | Perl解释器                              |\n  | [502.gcc_r](https://www.spec.org/cpu2017/Docs/benchmarks/502.gcc_r.html) | [602.gcc_s](https://www.spec.org/cpu2017/Docs/benchmarks/602.gcc_s.html) | C       | GNU C compiler                                               | GNU C编译器                             |\n  | [505.mcf_r](https://www.spec.org/cpu2017/Docs/benchmarks/505.mcf_r.html) | [605.mcf_s](https://www.spec.org/cpu2017/Docs/benchmarks/605.mcf_s.html) | C       | Route planning                                               | 路由规划                                |\n  | [520.omnetpp_r](https://www.spec.org/cpu2017/Docs/benchmarks/520.omnetpp_r.html) | [620.omnetpp_s](https://www.spec.org/cpu2017/Docs/benchmarks/620.omnetpp_s.html) | C++     | Discrete Event simulation - computer network                 | 离散事件仿真-计算机网络                 |\n  | [523.xalancbmk_r](https://www.spec.org/cpu2017/Docs/benchmarks/523.xalancbmk_r.html) | [623.xalancbmk_s](https://www.spec.org/cpu2017/Docs/benchmarks/623.xalancbmk_s.html) | C++     | XML to HTML conversion via XSLT                              | 通过XSLT将XML转换为HTML                 |\n  | [525.x264_r](https://www.spec.org/cpu2017/Docs/benchmarks/525.x264_r.html) | [625.x264_s](https://www.spec.org/cpu2017/Docs/benchmarks/625.x264_s.html) | C       | Video compression                                            | 视频压缩                                |\n  | [531.deepsjeng_r](https://www.spec.org/cpu2017/Docs/benchmarks/531.deepsjeng_r.html) | [631.deepsjeng_s](https://www.spec.org/cpu2017/Docs/benchmarks/631.deepsjeng_s.html) | C++     | Artificial Intelligence: alpha-beta tree search (Chess)      | 人工智能：阿尔法-贝塔树搜索（国际象棋） |\n  | [541.leela_r](https://www.spec.org/cpu2017/Docs/benchmarks/541.leela_r.html) | [641.leela_s](https://www.spec.org/cpu2017/Docs/benchmarks/641.leela_s.html) | C++     | Artificial Intelligence: Monte Carlo tree search (Go)        | 人工智能：蒙特卡洛树搜索(Go)            |\n  | [548.exchange2_r](https://www.spec.org/cpu2017/Docs/benchmarks/548.exchange2_r.html) | [648.exchange2_s](https://www.spec.org/cpu2017/Docs/benchmarks/648.exchange2_s.html) | Fortran | Artificial Intelligence: recursive solution generator (Sudoku) | 人工智能：递归解生成器（数独）          |\n  | [557.xz_r](https://www.spec.org/cpu2017/Docs/benchmarks/557.xz_r.html) | [657.xz_s](https://www.spec.org/cpu2017/Docs/benchmarks/657.xz_s.html) | C       | General data compression                                     | 通用数据压缩                            |\n\n  - fp 浮点型\n\n  | fprate子项                                                   | fpspeed子项                                                  | 语言            | 子项描述                                                    | 备注                             |\n  | ------------------------------------------------------------ | ------------------------------------------------------------ | --------------- | ----------------------------------------------------------- | -------------------------------- |\n  | [503.bwaves_r](https://www.spec.org/cpu2017/Docs/benchmarks/503.bwaves_r.html) | [603.bwaves_s](https://www.spec.org/cpu2017/Docs/benchmarks/603.bwaves_s.html) | Fortran         | Explosion modeling                                          | 爆炸建模                         |\n  | [507.cactuBSSN_r](https://www.spec.org/cpu2017/Docs/benchmarks/507.cactuBSSN_r.html) | [607.cactuBSSN_s](https://www.spec.org/cpu2017/Docs/benchmarks/607.cactuBSSN_s.html) | C++, C, Fortran | Physics: relativity                                         | 物理学：相对论                   |\n  | [508.namd_r](https://www.spec.org/cpu2017/Docs/benchmarks/508.namd_r.html) |                                                              | C++             | Molecular dynamics                                          | 分子动力学                       |\n  | [510.parest_r](https://www.spec.org/cpu2017/Docs/benchmarks/510.parest_r.html) |                                                              | C++             | Biomedical imaging: optical tomography with finite elements | 生物医学成像：有限元光学层析成像 |\n  | [511.povray_r](https://www.spec.org/cpu2017/Docs/benchmarks/511.povray_r.html) |                                                              | C++, C          | Ray tracing                                                 | 光线追踪                         |\n  | [519.lbm_r](https://www.spec.org/cpu2017/Docs/benchmarks/519.lbm_r.html) | [619.lbm_s](https://www.spec.org/cpu2017/Docs/benchmarks/619.lbm_s.html) | C               | Fluid dynamics                                              | 流体动力学                       |\n  | [521.wrf_r](https://www.spec.org/cpu2017/Docs/benchmarks/521.wrf_r.html) | [621.wrf_s](https://www.spec.org/cpu2017/Docs/benchmarks/621.wrf_s.html) | Fortran, C      | Weather forecasting                                         | 天气预报                         |\n  | [526.blender_r](https://www.spec.org/cpu2017/Docs/benchmarks/526.blender_r.html) |                                                              | C++, C          | 3D rendering and animation                                  | 3D渲染和动画                     |\n  | [527.cam4_r](https://www.spec.org/cpu2017/Docs/benchmarks/527.cam4_r.html) | [627.cam4_s](https://www.spec.org/cpu2017/Docs/benchmarks/627.cam4_s.html) | Fortran, C      | Atmosphere modeling                                         | 大气建模                         |\n  |                                                              | [628.pop2_s](https://www.spec.org/cpu2017/Docs/benchmarks/628.pop2_s.html) | Fortran, C      | Wide-scale ocean modeling (climate level)                   | 大尺度海洋建模（气候水平）       |\n  | [538.imagick_r](https://www.spec.org/cpu2017/Docs/benchmarks/538.imagick_r.html) | [638.imagick_s](https://www.spec.org/cpu2017/Docs/benchmarks/638.imagick_s.html) | C               | Image manipulation                                          | 图像处理                         |\n  | [544.nab_r](https://www.spec.org/cpu2017/Docs/benchmarks/544.nab_r.html) | [644.nab_s](https://www.spec.org/cpu2017/Docs/benchmarks/644.nab_s.html) | C               | Molecular dynamics                                          | 分子动力学                       |\n  | [549.fotonik3d_r](https://www.spec.org/cpu2017/Docs/benchmarks/549.fotonik3d_r.html) | [649.fotonik3d_s](https://www.spec.org/cpu2017/Docs/benchmarks/649.fotonik3d_s.html) | Fortran         | Computational Electromagnetics                              | 计算电磁学                       |\n  | [554.roms_r](https://www.spec.org/cpu2017/Docs/benchmarks/554.roms_r.html) | [654.roms_s](https://www.spec.org/cpu2017/Docs/benchmarks/654.roms_s.html) | Fortran         | Regional ocean modeling                                     | 区域海洋建模                     |\n\n  https://www.spec.org/cpu2017/results/res2017q2/cpu2017-20161026-00003.html\n\n- 预期结果：性能测试得分符合预期范围，无异常性能下降。\n\n#### 3.1.4 稳定性与压力测试\n\n- 测试目的：验证CPU在高负载、长时间运行下的稳定性和可靠性，确保无死机、重启、MCE错误等问题。\n- 测试方法：\n  1. 运行长时间的CPU压力测试（通常24小时以上）。\n  2. 在压力测试期间，监控系统日志和硬件错误日志。\n  3. \n- 测试工具：stress-ng、Prime95 (mprime)、Linpack。\n- 预期结果：在长时间压力测试下，系统运行稳定，无崩溃、重启或硬件错误记录。\n\n#### 3.1.5 温度与功耗监控\n\n- 测试目的：验证CPU在不同负载下的温度和功耗是否在正常范围内，并检查温控和节能机制是否有效。\n- 测试方法：\n  1. 在待机和满载状态下，通过BMC/IPMI或操作系统工具读取CPU温度和功耗。\n  2. 验证CPU频率是否能根据负载动态调整（如睿频、降频）。\n  3. \n- 测试工具：ipmitool sensor、lm-sensors、turbostat。\n\n```shell\n#常用命令\nipmitool sdr list \n\n```\n\n\n\n- 预期结果：CPU温度和功耗在设计规格内，温控和节能机制符合预期。\n\n### 3.2 内存（Memory）\n\n![DDR5 vs DDR4 vs DDR3 RAM module slot connector differences](https://io.bikegremlin.com/wp-content/uploads/2024/07/ddr3-vs-ddr4-vs-ddr5.jpg)\n\n#### 3.2.1 识别与容量检测\n\n#### 3.2.2 带宽与延迟测试\n\n\n\n```c\n#define    ONE            p = (char **)*p;\n#define    FIVE    ONE ONE ONE ONE ONE\n#define    TEN            FIVE FIVE\n#define    FIFTY    TEN TEN TEN TEN TEN\n#define    HUNDRED    FIFTY FIFTY\n\n    while (iterations-- > 0) {\n        for (i = 0; i < count; ++i) {\n            HUNDRED;\n        }\n    }\n\n```\n\n\n\n#### 3.2.3 ECC/纠错功能\n\n#### 3.2.4 稳定性与压力测试\n\n#### 3.2.5 多通道/多根条兼容性\n\n存储延迟 \n\n在处理器的性能指标中，各级Cache的访存延迟是一个重要的参数，其决定如果Cache访问命中或者失效，需要多少拍能回来，                       其为基于跳步（stride）的访存测试结果。\n\n这个测试应用LMbench中的存储延迟测试工具，执行的命令为./lat_mem_rd 128M 4096，其中4096参数为跳步大小。\n\n其基本原理是，通过按给定间隔去循环读一定大小的内存区域，测量每个读平均的时间。如果区域大小小于L1 Cache大小，时间应该接近L1的访问延迟；如果大于L1小于L2，则接近L2访问延迟；\n\n### 3.3 存储（硬盘/SSD/RAID）\n\n#### 3.3.1 识别与容量检测\n\n#### 3.3.2 性能测试\n\n#### 3.3.3 RAID功能与容错\n\n#### 3.3.4 热插拔与重建\n\n#### 3.3.5 数据完整性与恢复\n\n### 3.4 网络（NIC/网卡）\n\n#### 3.4.1 识别与速率检测\n\n#### 3.4.2 单口/多口带宽测试\n\n#### 3.4.3 多队列与中断亲和性\n\n#### 3.4.4 直连/组网功能\n\n#### 3.4.5 PXE/远程启动\n\n### 3.5 主板与芯片组\n\n#### 3.5.1 识别与信息检测\n\n#### 3.5.2 BIOS/UEFI功能与升级\n\n#### 3.5.3 PCIe插槽与扩展卡兼容性\n\n#### 3.5.4 温度与电压监控\n\n### 3.6 电源与风扇\n\n#### 3.6.1 电源冗余与切换\n\n#### 3.6.2 风扇转速与温控\n\n#### 3.6.3 功耗测试\n\n#### 3.6.4 断电/恢复\n\n### 3.7 BMC/IPMI/远程管理\n\n#### 3.7.1 远程管理功能\n\n#### 3.7.2 传感器与告警\n\n#### 3.7.3 虚拟介质与远程控制\n\n#### 3.7.4 固件升级与恢复\n\n### 3.8 GPU/加速卡\n\n#### 3.8.1 识别与驱动加载\n\n#### 3.8.2 性能与兼容性\n\n#### 3.8.3 稳定性与压力测试\n\n### 3.9 其他部件\n\n#### 3.9.1 USB/串口/并口\n\n#### 3.9.2 TPM/安全模块\n\n#### 3.9.3 光驱/读卡器等\n\n\n\n\n\n## 4. 整机维度测试\n\n### 4.1 操作系统与驱动\n\n#### 4.1.1 操作系统安装与兼容性\n\n#### 4.1.2 驱动加载与兼容性\n\n#### 4.1.3 固件升级与回滚\n\n#### 4.1.4 日志与告警检测\n\n### 4.2 性能测试\n\n#### 4.2.1 CPU整机性能\n\n计算机系统的性能有许多衡量指标，如执行时间或者响应时间、吞吐率、加速比、每条指令的时钟周期数（CPI）、每秒执行百万条指令数（MIPS）、每秒执行百万浮点运算数（MFLOPS）、每秒执行的事务数（TPS）和归一化的执行时间等。\n\n归根结底，计算机的性能最本质的定义是“完成一个任务所需要的时间”。\n\n计算机中完成一个任务的时间包括CPU计算、磁盘的访问、内存的访问、输入输出的活动和操作系统的开销等所有的时间。\n\n#### 4.2.2 内存整机带宽与延迟\n\n#### 4.2.3 存储整机性能\n\n#### 4.2.4 网络整机带宽与延迟\n\n#### 4.2.5 整机压力测试\n\n#### 4.3 稳定性与可靠性\n\n#### 4.3.1 长时间压力测试\n\n#### 4.3.2 断电/重启/热插拔\n\n#### 4.3.3 多用户并发\n\n#### 4.3.4 软硬件容错\n\n### 4.4 功耗与能耗\n\n#### 4.4.1 待机功耗\n\n#### 4.4.2 满载功耗\n\n#### 4.4.3 节能特性\n\n### 4.5 安全性\n\n#### 4.5.1 账户与权限管理\n\n#### 4.5.2 防火墙与端口安全\n\n#### 4.5.3 日志与审计\n\n#### 4.5.4 恶意代码与漏洞扫描\n\n### 4.6 兼容性与互操作性\n\n#### 4.6.1 多操作系统兼容\n\n#### 4.6.2 多种存储/网络设备兼容\n\n#### 4.6.3 虚拟化兼容\n\n### 4.7 故障注入与恢复\n\n#### 4.7.1 硬件故障模拟\n\n#### 4.7.2 软件异常处理\n\n#### 4.7.3 数据恢复能力\n\n## 5. 测试结果与问题记录\n\n### 5.1 测试结果汇总\n\n### 5.2 问题与缺陷记录\n\n### 5.3 解决建议\n\n\n\n\n\n## 6.附录\n\n### 6.1 测试脚本与工具说明\n\n| speccpu2017 | 1.1.8 | CPU性能测试工具      | 商用软件，需官方购买                                         |\n| ----------- | ----- | -------------------- | ------------------------------------------------------------ |\n| stream      | /     | 内存带宽性能测试工具 | <https://github.com/jeffhammond/STREAM/archive/master.zip>   |\n| FIO         | 3.13  | 磁盘IO性能测试工具   | <https://brick.kernel.dk/snaps/fio-3.33.tar.gz>              |\n| netperf     | 2.7.0 | 网络带宽性能测试工具 | <https://github.com/HewlettPackard/netperf/archive/netperf-2.7.0.tar.gz> |\n| Iperf       |       |                      |                                                              |\n| stress      | 1.0.5 | 稳定性压力测试软件   | <https://fossies.org/linux/privat/old/stress-1.0.5.tar.gz>   |\n| Memtester   |       |                      |                                                              |\n|             |       |                      |                                                              |\n\n### 6.2 术语表\n\nAI 人工智能（Artificial Intelligence）\nAIGC 生成式人工智能（Artificial Intelligence Generated Content）\nASIC 专用集成电路芯片（Application Specific Integrated Circuit）\nCEM 板卡机电（Card Electromechanical）\nCPU 中央处理器（Central Processing Unit）\nEMC 电磁兼容性（Electromagnetic Compatibility）\nFPGA 现场可编程门阵列（Field Programmable Gate Array）\nGPGPU 通用图像处理器（General-purpose computing on graphics processing units）\nPCIe 高速外围组件互连总线 （Peripheral Component Interconnect Express）\nPUE 数据中心电能利用率（Power Usage Effectiveness）\nRCM 机柜冷却工质供回歧管（Rack Coolant Manifold）\nVR 电压调节器（Voltage Regulator）\n\n### 6.3 参考文献","tags":["server"],"categories":["Tech","AI Infra"]},{"title":"服务器-JDM模式","url":"/2025/05/15/服务器-JDM模式/","content":"\n退一步显然没有海阔天空，但进一步也没有成熟经验。在此之前，科技产业只有两种IT供应链模式：“产品型”的OEM和“定制型”的ODM。前者是我（设备供应商）卖什么，你就只能买什么；后者是我（甲方客户）买什么，你就只能卖什么。\n\nJDM模式全称是Joint Design Manufacture联合开发模式"},{"title":"LLM_Interview_Note","url":"/2025/05/14/LLM-Interview-Note/","content":"\n1.当训练推理卡规模倍增的情况下，最容易产生瓶颈的位置可能是什么？\na.请展开分析产生的原因\nb.对于此类问题，有什么优化或者缓解的方案\nLLM训练&推理相关问题\n1. 当训练推理卡规模倍增的情况下，最容易产生瓶颈的位置可能是什么？\na. 请展开分析产生的原因\nb. 对于此类问题，有什么优化或者缓解方案\n● 主要瓶颈位置及原因\n1. 网络通信带宽瓶颈\n当训练推理卡规模倍增时，网络通信往往成为首要瓶颈。在分布式训练中，每个GPU完成计算后需与其他设备交换梯度信息，形成全局更新。随着设备数量增加，通信量可能呈平方或线性增长，而网络基础设施提升通常不成比例。这导致大量GPU在计算完成后需等待梯度同步，显著降低整体训练效率。特别是在大批量训练时，梯度同步时间可能占据总训练时间的30%以上。\n\n2.内存带宽瓶颈\n现代GPU计算核心数量增长速度通常快于内存带宽提升。在大模型训练过程中，权重、激活值、梯度等数据需在内存与计算单元间频繁传输，内存带宽不足会造成\"内存墙\"问题。测试表明，大型模型训练时GPU计算核心利用率可能仅有40-60%，主要受限于内存带宽，而非计算能力。这种情况下，即使增加更多GPU，性能提升也会低于理想值。\n\n3.存储I/O瓶颈\n大规模训练通常需处理TB级甚至PB级数据集。当并行GPU数量成倍增加时，对存储系统的并发读取压力呈线性增长。传统存储架构难以满足数百上千GPU的并发读取需求，导致数据加载成为训练流水线中的瓶颈。实践表明，在某些大规模训练中，GPU可能有20-30%时间处于等待数据状态。\n\n4.电力和散热瓶颈\n\t高性能GPU/TPU功耗通常在300-700W范围，密集部署时每机柜功耗可达40-60kW，远超传统数据中心设计标准(~15kW/机柜)。此外，空气冷却效率有限，难以有效散走如此密集的热量。在功率或温度限制下，GPU/TPU可能被迫降频运行，无法发挥全部性能潜力。\n\n5.软件扩展性瓶颈\n\t许多训练框架最初设计时未考虑极大规模并行场景。随着设备数量增加，调度开销、负载不均衡、资源碎片化等问题变得更为突出。软件层面的低效率可能使硬件资源利用率下降到理想值的70%以下，且这种效率损失通常随规模增大而加剧。\n\n● 优化与缓解方案\n 1. 网络通信优化\n     高性能互联技术：部署InfiniBand HDR/NDR、RDMA或专用AI网络架构，提供高带宽低延迟网络(如400Gbps-800Gbps互联)\n高效通信算法：实施Ring AllReduce、Tree AllReduce、BytePS等集合通信算法，降低通信复杂度\n梯度压缩技术：采用量化(1-8bit)、Top-K稀疏化、错误补偿等方法减少传输数据量\n通信计算重叠：设计流水线使梯度通信与下一步计算并行执行，减少等待时间\n2.内存带宽优化\n混合精度训练：使用FP16/BF16替代FP32，在保持精度的同时减少内存传输量达50%\n梯度累积策略：增大逻辑批次大小但分步计算，减少参数更新和同步频率\n内存效率算法：实施激活值重计算(Activation Recomputation)、选择性检查点(Selective Checkpointing)等节省内存技术\n硬件选择优化：优先选用HBM2E/HBM3等高带宽内存的GPU/TPU，如NVIDIA H100/H200或AMD MI300系列\n3. 存储I/O优化\n高性能分布式存储：部署HDFS、Lustre、Ceph或专用AI存储系统，提供TB/s级吞吐量\n多级缓存架构：在计算节点本地SSD或内存中建立数据缓存层，减少远程访问\n智能数据预取：基于训练模式预测并提前加载下一批训练数据，隐藏I/O延迟\n高效数据流水线：实现多阶段并行数据处理，如NVIDIA DALI或TensorFlow tf.data优化流水线\n\n4. 电力和散热解决方案\n先进冷却技术：采用直接液冷、浸没式冷却或冷板技术，散热效率提升3-5倍\n高效电源系统：使用转换效率95%以上的电源和UPS系统，减少能耗转换损失\n智能功耗管理：实施动态电压频率调节(DVFS)和精细化功耗分配，优化整体能效\n专用AI基础设施：建设专为高密度AI集群设计的数据中心，支持100kW+每机柜功率\n5. 软件架构优化\n专业分布式框架：使用DeepSpeed、Megatron-LM、Colossal-AI等专为大规模训练设计的框架\n混合并行策略：结合数据并行、模型并行、流水线并行和张量并行等技术，最大化硬件利用率\nZeRO优化系列：实施ZeRO-Offload、ZeRO-Infinity等内存优化技术，突破单卡内存限制\n容错训练系统：支持检查点、弹性恢复和动态资源调整的训练系统，提高大规模集群可靠性\n\n三、综合优化策略\n最有效的方案通常是综合应用上述技术，形成完整优化体系：\n基础设施层面：建设专用AI训练集群，配备高带宽网络、液冷系统和高效电源\n硬件选型层面：选择内存带宽与计算能力平衡的加速卡，如H100、H200或专用ASIC\n系统软件层面：部署优化的驱动、通信库和分布式文件系统，提供底层效率保障\n训练框架层面：使用支持多种并行策略的框架，根据模型特点选择最佳并行方案\n算法优化层面：实施混合精度、梯度压缩、激活值重计算等算法级优化\n通过这种多层次、全方位的优化体系，可以显著提高大规模推理卡训练效率，使性能扩展更接近线性理想状态，充分发挥硬件投资价值。在实践中，通常需根据具体模型特点、训练规模和可用资源，定制最适合的优化组合。\n2.请解释并介绍一下Roofline模型，如何判断性能已经达到计算瓶颈\n\n3.请介绍一下Flash-attention/Page attention\n\n4.当进行GEMM计算时，一定可以保证它是一个计算瓶颈的算子？优化思路如何？\n\n5.对于性能优化的定位和瓶颈的检测\n\n6.GQA attention模块的实现\n\n7.什么是scaling law\n\n8.模型结构\n\n9.解决显存容量不够的方法，对于显存优化的选择有什么看法？\n\n10.MOE 和Dense模型的区别 各自的优缺点 \na.计算量、参数量、训练效果\nb.如何选择\n\n11.宏观上推理prefill、decode过程 prefill是compute bound、decode是memory bound\n\n12.算子gemm、transpose、mha、rmsnorm、gemv、rope等算子的优化方案\n\n13.量化awq/fp8/bf16/int8/gptq/wight-only优化\n\n14.分布式推理 DP TP PP \n\n15.推理优化 continuous batching/speculative decoding \n\n16.分布式推理all-reduce/all-gather 优化\n\n17.通信优化nccl infiniband优化\n\n"},{"title":"Hello World","url":"/2025/05/14/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"},{"title":"我的450MT提车日记","url":"/2025/04/29/我的450MT提车日记/","content":"\n## 初识\n450mt 标准版\n\n\"我妄想骑着我的烂摩托，去转一转...\"，买摩托的想法从2023开始，一直想搞一辆摩托骑；于是在24年初报考了驾校，将驾驶证转到了北京，经历了一个月的忙碌，刘师傅终于可以合法上路了，奈何没有车；那下一步就是买车？又陷入了选择困难，虽然年轻人都喜欢仿赛（骑最猛的车，割最大的痔疮 哈哈），巡航那更不行（咖啡太苦，上班喝喝还行...)，所以对于一个豫西小伙来说，看惯山山水水，骨子里还是有点冒险精神，那最后只有ADV了，毕竟（Adventure Begins Where The Road Ends.），那就开整呗~\n开整肯定没那那么快，必须先考察一波。每天晚饭日常遛弯的首要任务就是看车，瞧瞧大佬都买什么车，看了一圈Kwaisake nijia400不下10辆（都是rich man）,啥配色都有；其次就是巡航，咖啡车还是上档次，占停车场半壁江山；ADV瞅了一圈，都不咋喜欢，主要排量太大腿短驾驭不了。总结一下，有点乱花渐欲迷人眼了,没我的梦中情车，看来还要寻觅一番...\n这里搞几张大佬爱车帅照，搞个简易车展...\n\n<center class=\"half\">\n    <img src=\"我的450MT提车日记/kwaisak.jpg\" alt=\"kwaisak\" style=\"zoom:20%;\" />\n    <img src=\"我的450MT提车日记/BMW1800.jpg\" alt=\"BMW1800\" style=\"zoom:20%;\" />\n    <img src=\"我的450MT提车日记/Kawasaki.jpg\" alt=\"Kawasaki\" style=\"zoom:20%;\" />\n    <img src=\"我的450MT提车日记/ktm390ADV.jpg\" alt=\"ktm390ADV\" style=\"zoom:20%;\" />\n    <img src=\"我的450MT提车日记/aplia.jpg\" alt=\"aplia\" style=\"zoom:20%;\" />\n    <img src=\"我的450MT提车日记/xiaoche.jpg\" alt=\"xiaoche\" style=\"zoom:20%;\" />\n</center>\n\n![450mt](我的450MT提车日记/450mt.png)\n\n\n![450mt](我的450MT提车日记/450mt.png)\n\n![450mt](我的450MT提车日记/450mt.png)","categories":["Life","Motocycle"]}]